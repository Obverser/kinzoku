import subprocess
import os

from typing import Any
from pycparser import c_parser

from lib.transformer import Transformer
from lib.writer import Writer
from lib.func_transformer import FunctionTransformer
from lib.enum_transformer import EnumTransformer
from lib.struct_transformer import StructTransformer


def parse(file: str):
    # Preprocess the header file as required by the parser
    text = subprocess.check_output(
        ["clang", "-E", file]
    ).decode("utf-8")

    def condition(line: str) -> bool:
        broken_line = "typedef __builtin_va_list __darwin_va_list;"
        return line.strip() != broken_line
    lines = filter(condition, text.split("\n"))

    # Parse the header
    parser = c_parser.CParser()
    return parser.parse("\n".join(lines), filename="wgpu.h")


def run_transformer(
        transformer: Transformer,
        ast,
        output_dir: str) -> list[Any]:
    """Runs a transformer that generates a specific set of boilerplate
    code from the header's ast. The transformers internal
    representation of the ast is returned so that subsequent
    transformers can have richer context without having to complicate
    their preprocessing step.
    """

    output_file = f"{output_dir}/{transformer.output_file}"

    # Convert the ast into an intermediate representation.
    visitor_outputs = []
    for decl in ast.ext:
        output = transformer.visit(decl)
        if output is not None:
            visitor_outputs.append(output)

    # Generate code from the intermediate representation.
    writer = Writer()
    writer.block("""
    // This file is automatically generated from wgpu's C headers. Do not
    // edit this file directly. Edit the corresponding generator instead.
    """)
    if transformer.prelude is not None:
        writer.line("")
        writer.block(transformer.prelude)
    transformer.gen(visitor_outputs, writer)

    # Write to the transformer's output file.
    with open(output_file, "w") as f:
        f.write(writer.finish())

    return visitor_outputs


def main():
    ast = parse("./headers/wgpu.h")

    output_dir = "../Sources/Kinzoku/Generated"
    os.makedirs(output_dir, exist_ok=True)

    funcs = run_transformer(
        FunctionTransformer(),
        ast,
        output_dir
    )

    enums = run_transformer(
        EnumTransformer(),
        ast,
        output_dir
    )

    run_transformer(
        StructTransformer(funcs, enums),
        ast,
        output_dir
    )


if __name__ == "__main__":
    main()
