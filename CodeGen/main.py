import subprocess
import os

from typing import Any
from pycparser import c_parser, c_ast

from lib.generators import (
    FunctionTransformer,
    Writer,
    Transformer,
    StructTransformer,
    EnumTransformer
)

def parse(file: str):
    # Preprocess the header file as required by the parser
    text = subprocess.check_output(["clang", "-E", file]).decode("utf-8")
    def condition(line: str) -> bool:
        return line.strip() != "typedef __builtin_va_list __darwin_va_list;"
    lines = filter(condition, text.split("\n"))

    # Parse the header
    parser = c_parser.CParser()
    return parser.parse("\n".join(lines), filename="wgpu.h")

def apply_transformer(transformer: Transformer, ast, output_dir: str) -> list[Any]:
    """Returns the transformers internal representation of the ast so that
    proceeding transformers can reuse it.
    """

    output_file = f"{output_dir}/{transformer.output_file}"

    # Convert the ast into an intermediate representation.
    visitor_outputs = []
    for decl in ast.ext:
        output = transformer.visit(decl)
        if output != None:
            visitor_outputs.append(output)

    # Generate code from the intermediate representation.
    writer = Writer()
    writer.block("""
    // This file is automatically generated from wgpu's C headers. Do not
    // edit this file directly. Edit the corresponding generator instead.
    """)
    writer.line("")
    if transformer.prelude != None:
        writer.block(transformer.prelude)
    transformer.gen(visitor_outputs, writer)

    # Write to the transformer's output file.
    with open(output_file, "w") as f:
        f.write(writer.finish())

    return visitor_outputs

ast = parse("./wgpu.h")

output_dir = "../Sources/Kinzoku/Generated"
os.makedirs(output_dir, exist_ok=True)


swift_funcs = apply_transformer(
    FunctionTransformer(),
    ast,
    output_dir
)

swift_enums = apply_transformer(
    EnumTransformer(),
    ast,
    output_dir
)

swift_structs = apply_transformer(
    StructTransformer(swift_funcs),
    ast,
    output_dir
)

# Generate types

# TODO: Fix enum generation for KZInstanceBackend (have to evaluate constants to obtain equivalent
# literals)
